diff --git a/CMakeLists.txt b/CMakeLists.txt
index 48dd73e..3505db4 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -59,11 +59,11 @@ if(WIN32)
 endif()
 find_package(Python3 COMPONENTS Interpreter Development)
 
-if(IS_DEBUG_BUILD AND WIN32)
-    # Explicitly setting SHIBOKEN_PYTHON_LIBRARIES variable to avoid PYTHON_DEBUG_LIBRARY-NOTFOUND
-    # link errors on Windows debug builds.
-    set(SHIBOKEN_PYTHON_LIBRARIES ${Python3_LIBRARIES})
-endif()
+#if(IS_DEBUG_BUILD AND WIN32)
+#    # Explicitly setting SHIBOKEN_PYTHON_LIBRARIES variable to avoid PYTHON_DEBUG_LIBRARY-NOTFOUND
+#    # link errors on Windows debug builds.
+#    set(SHIBOKEN_PYTHON_LIBRARIES ${Python3_LIBRARIES})
+#endif()
 
 set(QT_COMPONENTS Core Gui Network Widgets Concurrent)
 if(NATRON_QT6)
@@ -85,13 +85,13 @@ if(NATRON_QT6)
     set(PYSIDE_LIB PySide6::pyside6)
 else()
     find_package(Qt5 5.15 CONFIG REQUIRED COMPONENTS ${QT_COMPONENTS})
-    find_package(Shiboken2 5.15 CONFIG REQUIRED COMPONENTS libshiboken2 shiboken2)
+    #find_package(Shiboken2 5.15 CONFIG REQUIRED COMPONENTS libshiboken2 shiboken2)
 
-    find_package(PySide2 5.15 CONFIG REQUIRED COMPONENTS pyside2)
+    #find_package(PySide2 5.15 CONFIG REQUIRED COMPONENTS pyside2)
     set(QT_VERSION_MAJOR 5)
     set(PYSIDE_VERSION_MAJOR 2)
 
-    get_target_property(PYSIDE_INCLUDE_DIRS PySide2::pyside2 INTERFACE_INCLUDE_DIRECTORIES)
+    #get_target_property(PYSIDE_INCLUDE_DIRS PySide2::pyside2 INTERFACE_INCLUDE_DIRECTORIES)
     set(QTCORE_INCLUDE_DIRS ${Qt5Core_INCLUDE_DIRS})
     set(QTGUI_INCLUDE_DIRS ${Qt5Gui_INCLUDE_DIRS})
     set(QTWIDGETS_INCLUDE_DIRS ${Qt5Widgets_INCLUDE_DIRS})
@@ -101,12 +101,12 @@ else()
     set(PYSIDE_LIB PySide2::pyside2)
 endif()
 
-if(IS_DEBUG_BUILD AND WIN32)
-    # Remove NDEBUG from Shiboken INTERFACE_COMPILE_DEFINITIONS so it is not inherited in debug builds.
-    get_property(SHIBOKEN_DEFS TARGET ${SHIBOKEN_LIB} PROPERTY INTERFACE_COMPILE_DEFINITIONS)
-    list(REMOVE_ITEM SHIBOKEN_DEFS NDEBUG)
-    set_property(TARGET ${SHIBOKEN_LIB} PROPERTY INTERFACE_COMPILE_DEFINITIONS SHIBOKEN_DEFS)
-endif()
+#if(IS_DEBUG_BUILD AND WIN32)
+#    # Remove NDEBUG from Shiboken INTERFACE_COMPILE_DEFINITIONS so it is not inherited in debug builds.
+#    get_property(SHIBOKEN_DEFS TARGET ${SHIBOKEN_LIB} PROPERTY INTERFACE_COMPILE_DEFINITIONS)
+#    list(REMOVE_ITEM SHIBOKEN_DEFS NDEBUG)
+#    set_property(TARGET ${SHIBOKEN_LIB} PROPERTY INTERFACE_COMPILE_DEFINITIONS SHIBOKEN_DEFS)
+#endif()
 
 #Since in Natron and OpenFX all strings are supposed UTF-8 and that the constructor
 #for QString(const char*) assumes ASCII strings, we may run into troubles
@@ -134,9 +134,10 @@ if(UNIX AND NOT APPLE)
     find_package(ECM NO_MODULE)
     set(CMAKE_MODULE_PATH ${ECM_MODULE_PATH} ${CMAKE_MODULE_PATH})
     find_package(X11 REQUIRED)
-    find_package(Wayland COMPONENTS Client Egl)
+    find_package(wayland COMPONENTS wayland-client wayland-egl)
 elseif(APPLE)
     enable_language(OBJCXX)
+    find_package(OPENGL)
 elseif(WIN32)
     enable_language(RC)
     add_compile_definitions(WINDOWS WIN32 _UNICODE UNICODE NOMINMAX QHTTP_SERVER_STATIC)
diff --git a/Engine/AppManager.cpp b/Engine/AppManager.cpp
index 071f46b..676ba09 100644
--- a/Engine/AppManager.cpp
+++ b/Engine/AppManager.cpp
@@ -138,7 +138,8 @@
 #include "Engine/ViewerInstance.h" // RenderStatsMap
 #include "Engine/WriteNode.h"
 
-#include "sbkversion.h" // shiboken/pyside version
+#define SHIBOKEN_VERSION "5.15.13"
+//#include "sbkversion.h" // shiboken/pyside version
 
 #include "AppManagerPrivate.h" // include breakpad after Engine, because it includes /usr/include/AssertMacros.h on OS X which defines a check(x) macro, which conflicts with boost
 
@@ -742,6 +743,7 @@ AppManager::loadInternal(const CLArgs& cl)
 
     _imp->declareSettingsToPython();
 
+#ifndef NATRON_RUN_WITHOUT_PYTHON
     // executeCommandLineSettingCommands
     {
         const std::list<std::string>& commands = cl.getSettingCommands();
@@ -766,6 +768,7 @@ AppManager::loadInternal(const CLArgs& cl)
             }
         }
     }
+#endif  // NATRON_RUN_WITHOUT_PYTHON
 
     ///basically show a splashScreen load fonts etc...
     return initGui(cl);
@@ -3050,10 +3053,10 @@ PyObject* PyInit_NatronEngine();
 void
 AppManager::initBuiltinPythonModules()
 {
-    int ret = PyImport_AppendInittab(NATRON_ENGINE_PYTHON_MODULE_NAME, &PyInit_NatronEngine);
-    if (ret == -1) {
-        throw std::runtime_error("Failed to initialize built-in Python module.");
-    }
+    //int ret = PyImport_AppendInittab(NATRON_ENGINE_PYTHON_MODULE_NAME, &PyInit_NatronEngine);
+    //if (ret == -1) {
+    //    throw std::runtime_error("Failed to initialize built-in Python module.");
+    //}
 }
 
 void
diff --git a/Engine/CMakeLists.txt b/Engine/CMakeLists.txt
index 576f7b2..29e9e1c 100644
--- a/Engine/CMakeLists.txt
+++ b/Engine/CMakeLists.txt
@@ -17,9 +17,8 @@
 # along with Natron.  If not, see <http://www.gnu.org/licenses/gpl-2.0.html>
 # ***** END LICENSE BLOCK *****
 
-include(FindPkgConfig)
-
-pkg_check_modules(Cairo REQUIRED IMPORTED_TARGET cairo fontconfig)
+find_package(cairo COMPONENTS cairo)
+find_package(Fontconfig COMPONENTS Fontconfig)
 
 file(GLOB NatronEngine_HEADERS *.h)
 file(GLOB NatronEngine_SOURCES *.cpp)
@@ -49,8 +48,8 @@ add_custom_command(OUTPUT ${PyEngine_SOURCES}
 
 if(UNIX AND NOT APPLE)
     set(XDG_LIBS ${X11_LIBRARIES})
-    if(Wayland_FOUND)
-        set(XDG_LIBS Wayland::Client Wayland::Egl ${XDG_LIBS})
+    if(wayland_FOUND)
+        set(XDG_LIBS wayland::wayland-client wayland::wayland-egl ${XDG_LIBS})
         set(XDG_DEFS __NATRON_WAYLAND__)
     endif()
 endif()
@@ -58,7 +57,7 @@ endif()
 
 list(APPEND NatronEngine_SOURCES
     ${NatronEngine_SOURCES}
-    ${PyEngine_SOURCES}
+    #${PyEngine_SOURCES}
     ../Global/glad_source.c
     ../Global/FStreamsSupport.cpp
     ../Global/ProcInfo.cpp
@@ -72,13 +71,13 @@ target_link_libraries(NatronEngine
         HostSupport
         Boost::headers
         Boost::serialization
-        PkgConfig::Cairo
+        cairo::cairo
     PRIVATE
-        ${SHIBOKEN_LIB}
-        ${PYSIDE_LIB}
-        Qt::Core
-        Qt::Concurrent
-        Qt::Network
+        #${SHIBOKEN_LIB}
+        #${PYSIDE_LIB}
+        Qt5::Core
+        Qt5::Concurrent
+        Qt5::Network
         Python3::Module
         ${XDG_LIBS}
         ceres
@@ -93,6 +92,10 @@ if(WIN32)
     target_link_libraries(NatronEngine PRIVATE mpr)
 endif()
 
+if(APPLE)
+    target_link_libraries(NatronEngine PRIVATE opengl::opengl)
+endif()
+
 target_include_directories(NatronEngine
     PUBLIC
         ../Global/glad$<IF:$<CONFIG:Debug>,Deb,Rel>/include
diff --git a/Engine/Knob.cpp b/Engine/Knob.cpp
index 48e5bd3..0b96f94 100644
--- a/Engine/Knob.cpp
+++ b/Engine/Knob.cpp
@@ -2947,7 +2947,9 @@ void
 KnobHelper::clearExpression(int dimension,
                             bool clearResults)
 {
+#ifndef NATRON_RUN_WITHOUT_PYTHON
     PythonGILLocker pgl;
+#endif  // NATRON_RUN_WITHOUT_PYTHON
     bool hadExpression;
     {
         QMutexLocker k(&_imp->expressionMutex);
diff --git a/Gui/CMakeLists.txt b/Gui/CMakeLists.txt
index b3e06b0..381bc9c 100644
--- a/Gui/CMakeLists.txt
+++ b/Gui/CMakeLists.txt
@@ -57,19 +57,19 @@ endif()
 
 list(APPEND NatronGui_SOURCES
     ${NatronGui_SOURCES}
-    ${PyGui_SOURCES}
+    #${PyGui_SOURCES}
     GuiResources.qrc
 )
 add_library(NatronGui STATIC ${NatronGui_HEADERS} ${NatronGui_SOURCES})
 target_link_libraries(NatronGui
     PUBLIC
-        ${SHIBOKEN_LIB}
-        ${PYSIDE_LIB}
-        Qt::Core
-        Qt::Concurrent
-        Qt::Network
-        Qt::Gui
-        Qt::Widgets
+        #${SHIBOKEN_LIB}
+        #${PYSIDE_LIB}
+        Qt5::Core
+        Qt5::Concurrent
+        Qt5::Network
+        Qt5::Gui
+        Qt5::Widgets
         ${QT_OPENGLWIDGETS}
         Python3::Module
         NatronEngine
diff --git a/Gui/GuiApplicationManager10.cpp b/Gui/GuiApplicationManager10.cpp
index 452b425..2f96e00 100644
--- a/Gui/GuiApplicationManager10.cpp
+++ b/Gui/GuiApplicationManager10.cpp
@@ -1149,10 +1149,10 @@ GuiApplicationManager::initBuiltinPythonModules()
 {
     AppManager::initBuiltinPythonModules();
 
-    int ret = PyImport_AppendInittab(NATRON_GUI_PYTHON_MODULE_NAME, &PyInit_NatronGui);
-    if (ret == -1) {
-        throw std::runtime_error("Failed to initialize built-in Python module.");
-    }
+    //int ret = PyImport_AppendInittab(NATRON_GUI_PYTHON_MODULE_NAME, &PyInit_NatronGui);
+    //if (ret == -1) {
+    //    throw std::runtime_error("Failed to initialize built-in Python module.");
+    //}
 }
 
 void
diff --git a/HostSupport/CMakeLists.txt b/HostSupport/CMakeLists.txt
index 86d772e..37f0004 100644
--- a/HostSupport/CMakeLists.txt
+++ b/HostSupport/CMakeLists.txt
@@ -18,7 +18,7 @@
 # ***** END LICENSE BLOCK *****
 
 # see https://cmake.org/cmake/help/latest/module/FindEXPAT.html
-find_package(EXPAT REQUIRED)
+find_package(expat REQUIRED)
 
 file(GLOB HostSupport_HEADERS
     ../libs/OpenFX/HostSupport/include/*.h
@@ -46,7 +46,7 @@ set(HostSupport_SOURCES
 add_library(HostSupport STATIC ${HostSupport_SOURCES})
 target_link_libraries(HostSupport
     PRIVATE
-        EXPAT::EXPAT
+        expat::expat
 )
 target_include_directories(HostSupport
     PUBLIC
diff --git a/Renderer/CMakeLists.txt b/Renderer/CMakeLists.txt
index b54e1f2..740db68 100644
--- a/Renderer/CMakeLists.txt
+++ b/Renderer/CMakeLists.txt
@@ -25,9 +25,9 @@ add_executable(NatronRenderer ${NatronRenderer_SOURCES})
 target_link_libraries(NatronRenderer
     PRIVATE
         NatronEngine
-        Qt::Core
-        Qt::Concurrent
-        Qt::Network
+        Qt5::Core
+        Qt5::Concurrent
+        Qt5::Network
         Python3::Python
 )
 target_include_directories(NatronRenderer
diff --git a/Tests/CMakeLists.txt b/Tests/CMakeLists.txt
index f40cbcb..333e603 100644
--- a/Tests/CMakeLists.txt
+++ b/Tests/CMakeLists.txt
@@ -36,7 +36,7 @@ add_executable(Tests ${Tests_HEADERS} ${Tests_SOURCES})
 target_link_libraries(Tests
     PRIVATE
         NatronEngine
-        Qt::Core
+        Qt5::Core
         Python3::Python
         openMVG
 )
diff --git a/libs/libmv/libmv/logging/logging.h b/libs/libmv/libmv/logging/logging.h
index dcc6a3a..a544f60 100644
--- a/libs/libmv/libmv/logging/logging.h
+++ b/libs/libmv/libmv/logging/logging.h
@@ -21,6 +21,9 @@
 #ifndef LIBMV_LOGGING_LOGGING_H
 #define LIBMV_LOGGING_LOGGING_H
 
+#ifdef ERROR
+#undef ERROR
+#endif
 #include <glog/logging.h>
 
 #ifdef DEBUG
@@ -34,7 +37,7 @@
 true ? (void) 0 : google::LogMessageVoidify() & LOG(severity)
 #endif
 
-#define LG LIBMV_LOG(INFO)
+//#define LG LIBMV_LOG(INFO)
 #define V0 LIBMV_LOG(INFO)
 #define V1 LIBMV_LOG(INFO)
 #define V2 LIBMV_LOG(INFO)
diff --git a/libs/qhttpserver/CMakeLists.txt b/libs/qhttpserver/CMakeLists.txt
index bac81b9..7a3b3a2 100644
--- a/libs/qhttpserver/CMakeLists.txt
+++ b/libs/qhttpserver/CMakeLists.txt
@@ -29,6 +29,6 @@ set(qhttpserver_HEADERS
 file(GLOB qhttpserver_SOURCES src/*.cpp)
 set(qhttpserver_SOURCES ${qhttpserver_SOURCES} http-parser/http_parser.c)
 add_library(qhttpserver STATIC ${qhttpserver_HEADERS} ${qhttpserver_SOURCES})
-target_link_libraries(qhttpserver PRIVATE Qt::Core Qt::Network)
+target_link_libraries(qhttpserver PRIVATE Qt5::Core Qt5::Network)
 target_include_directories(qhttpserver PRIVATE http-parser)
 set_target_properties(qhttpserver PROPERTIES POSITION_INDEPENDENT_CODE ON)
